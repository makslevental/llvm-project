--- |
  ; ModuleID = '/home/mlevental/dev_projects/llvm-project/llvm/lib/Target/AMDGPU/test_v_pk.ll'
  source_filename = "/home/mlevental/dev_projects/llvm-project/llvm/lib/Target/AMDGPU/test_v_pk.ll"
  target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-p7:160:256:256:32-p8:128:128-p9:192:256:256:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-G1-ni:7:8:9"
  target triple = "amdgcn"
  
  define amdgpu_kernel void @add_kernel(ptr addrspace(1) readonly captures(none) %0, ptr addrspace(1) readonly captures(none) %1, ptr addrspace(1) writeonly captures(none) %2, i32 %3) local_unnamed_addr #0 {
    %add_kernel.kernarg.segment = call nonnull align 16 dereferenceable(284) ptr addrspace(4) @llvm.amdgcn.kernarg.segment.ptr()
    %.kernarg.offset7 = getelementptr inbounds i8, ptr addrspace(4) %add_kernel.kernarg.segment, i64 60, !amdgpu.uniform !0
    %.load8 = load i32, ptr addrspace(4) %.kernarg.offset7, align 4, !invariant.load !0
    %5 = tail call i32 @llvm.amdgcn.workgroup.id.x()
    %6 = shl i32 %5, 10
    %7 = tail call i32 @llvm.amdgcn.workitem.id.x()
    %8 = shl i32 %7, 2
    %9 = and i32 %8, 1020
    %10 = or disjoint i32 %9, %6
    %11 = icmp slt i32 %10, %.load8
    %12 = call { i1, i64 } @llvm.amdgcn.if.i64(i1 %11)
    %13 = extractvalue { i1, i64 } %12, 0
    %14 = extractvalue { i1, i64 } %12, 1
    br i1 %13, label %.critedge, label %.critedge2
  
  .critedge:                                        ; preds = %4
    %.kernarg.offset = getelementptr inbounds i8, ptr addrspace(4) %add_kernel.kernarg.segment, i64 36, !amdgpu.uniform !0
    %15 = load <3 x i64>, ptr addrspace(4) %.kernarg.offset, align 4, !invariant.load !0
    %.load9 = extractelement <3 x i64> %15, i32 0
    %16 = inttoptr i64 %.load9 to ptr addrspace(1)
    %.load410 = extractelement <3 x i64> %15, i32 1
    %17 = inttoptr i64 %.load410 to ptr addrspace(1)
    %.load611 = extractelement <3 x i64> %15, i32 2
    %18 = inttoptr i64 %.load611 to ptr addrspace(1)
    %19 = sext i32 %10 to i64
    %20 = getelementptr float, ptr addrspace(1) %16, i64 %19
    %21 = load <2 x float>, ptr addrspace(1) %20, align 16
    %22 = extractelement <2 x float> %21, i32 0
    %23 = extractelement <2 x float> %21, i32 1
    %v_100 = insertelement <2 x float> undef, float %22, i32 0
    %v_102 = insertelement <2 x float> %v_100, float %23, i32 1
    %24 = getelementptr inbounds i8, ptr addrspace(1) %20, i64 8
    %25 = getelementptr float, ptr addrspace(1) %17, i64 %19
    %26 = getelementptr float, ptr addrspace(1) %18, i64 %19
    %27 = getelementptr inbounds i8, ptr addrspace(1) %25, i64 12
    %28 = load <2 x float>, ptr addrspace(1) %25, align 16
    %29 = extractelement <2 x float> %28, i32 0
    %30 = extractelement <2 x float> %28, i32 1
    %v_400 = insertelement <2 x float> undef, float %30, i32 0
    %v_402 = insertelement <2 x float> %v_400, float %29, i32 1
    %v_500 = fadd <2 x float> %v_102, %v_402
    %v_30 = extractelement <2 x float> %v_500, i32 1
    %v_28 = extractelement <2 x float> %v_500, i32 0
    store float %v_28, ptr addrspace(1) %26, align 4
    %p_301 = getelementptr i8, ptr addrspace(1) %26, i64 8
    %31 = insertelement <2 x float> poison, float %v_30, i32 0
    %32 = insertelement <2 x float> %31, float %v_28, i32 1
    store <2 x float> %32, ptr addrspace(1) %p_301, align 4
    br label %.critedge2, !amdgpu.uniform !0
  
  .critedge2:                                       ; preds = %.critedge, %4
    call void @llvm.amdgcn.end.cf.i64(i64 %14)
    ret void
  }
  
  ; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
  declare noundef i32 @llvm.amdgcn.workgroup.id.x() #1
  
  ; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
  declare noundef i32 @llvm.amdgcn.workitem.id.x() #1
  
  ; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
  declare noundef align 4 ptr addrspace(4) @llvm.amdgcn.kernarg.segment.ptr() #2
  
  ; Function Attrs: nocallback nofree nounwind willreturn
  declare { i1, i64 } @llvm.amdgcn.if.i64(i1) #3
  
  ; Function Attrs: nocallback nofree nounwind willreturn
  declare void @llvm.amdgcn.end.cf.i64(i64) #3
  
  attributes #0 = { "target-cpu"="gfx942" }
  attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) "target-cpu"="gfx942" }
  attributes #2 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
  attributes #3 = { nocallback nofree nounwind willreturn }
  
  !0 = !{}
...
---
name:            add_kernel
alignment:       1
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
noPhis:          false
isSSA:           true
noVRegs:         false
hasFakeUses:     false
callsEHReturn:   false
callsUnwindInit: false
hasEHContTarget: false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: sreg_64, preferred-register: '', flags: [  ] }
  - { id: 1, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 2, class: sreg_64, preferred-register: '', flags: [  ] }
  - { id: 3, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 4, class: sgpr_64, preferred-register: '', flags: [  ] }
  - { id: 5, class: sgpr_64, preferred-register: '', flags: [  ] }
  - { id: 6, class: sgpr_64, preferred-register: '', flags: [  ] }
  - { id: 7, class: sgpr_64, preferred-register: '', flags: [  ] }
  - { id: 8, class: sgpr_32, preferred-register: '', flags: [  ] }
  - { id: 9, class: sgpr_32, preferred-register: '', flags: [  ] }
  - { id: 10, class: sgpr_32, preferred-register: '', flags: [  ] }
  - { id: 11, class: sreg_32_xm0_xexec, preferred-register: '', flags: [  ] }
  - { id: 12, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 13, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 14, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 15, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 16, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 17, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 18, class: sreg_64, preferred-register: '', flags: [  ] }
  - { id: 19, class: sgpr_128, preferred-register: '', flags: [  ] }
  - { id: 20, class: sreg_64_xexec, preferred-register: '', flags: [  ] }
  - { id: 21, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 22, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 23, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 24, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 25, class: sreg_64, preferred-register: '', flags: [  ] }
  - { id: 26, class: sreg_64, preferred-register: '', flags: [  ] }
  - { id: 27, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 28, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 29, class: vreg_64_align2, preferred-register: '', flags: [  ] }
  - { id: 30, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 31, class: vreg_64_align2, preferred-register: '', flags: [  ] }
  - { id: 32, class: vreg_64_align2, preferred-register: '', flags: [  ] }
  - { id: 33, class: vreg_64_align2, preferred-register: '', flags: [  ] }
  - { id: 34, class: vreg_64_align2, preferred-register: '', flags: [  ] }
  - { id: 35, class: vreg_64_align2, preferred-register: '', flags: [  ] }
  - { id: 36, class: vreg_64_align2, preferred-register: '', flags: [  ] }
  - { id: 37, class: vreg_64_align2, preferred-register: '', flags: [  ] }
  - { id: 38, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 39, class: vreg_64_align2, preferred-register: '', flags: [  ] }
liveins:
  - { reg: '$vgpr0', virtual-reg: '%3' }
  - { reg: '$sgpr4_sgpr5', virtual-reg: '%6' }
  - { reg: '$sgpr8', virtual-reg: '%8' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  isCalleeSavedInfoValid: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo:
  explicitKernArgSize: 28
  maxKernArgAlign: 8
  ldsSize:         0
  gdsSize:         0
  dynLDSAlign:     1
  isEntryFunction: true
  isChainFunction: false
  noSignedZerosFPMath: false
  memoryBound:     false
  waveLimiter:     false
  hasSpilledSGPRs: false
  hasSpilledVGPRs: false
  scratchRSrcReg:  '$private_rsrc_reg'
  frameOffsetReg:  '$fp_reg'
  stackPtrOffsetReg: '$sgpr32'
  bytesInStackArgArea: 0
  returnsVoid:     true
  argumentInfo:
    dispatchPtr:     { reg: '$sgpr0_sgpr1' }
    queuePtr:        { reg: '$sgpr2_sgpr3' }
    kernargSegmentPtr: { reg: '$sgpr4_sgpr5' }
    dispatchID:      { reg: '$sgpr6_sgpr7' }
    workGroupIDX:    { reg: '$sgpr8' }
    workGroupIDY:    { reg: '$sgpr9' }
    workGroupIDZ:    { reg: '$sgpr10' }
    workItemIDX:     { reg: '$vgpr0', mask: 1023 }
    workItemIDY:     { reg: '$vgpr0', mask: 1047552 }
    workItemIDZ:     { reg: '$vgpr0', mask: 1072693248 }
  psInputAddr:     0
  psInputEnable:   0
  maxMemoryClusterDWords: 8
  mode:
    ieee:            true
    dx10-clamp:      true
    fp32-input-denormals: true
    fp32-output-denormals: true
    fp64-fp16-input-denormals: true
    fp64-fp16-output-denormals: true
  highBitsOf32BitAddress: 0
  occupancy:       8
  vgprForAGPRCopy: ''
  sgprForEXECCopy: '$sgpr100_sgpr101'
  longBranchReservedReg: ''
  hasInitWholeWave: false
  scratchReservedForDynamicVGPRs: 0
body:             |
  bb.0 (%ir-block.4):
    successors: %bb.1(0x40000000), %bb.2(0x40000000)
    liveins: $vgpr0, $sgpr4_sgpr5, $sgpr8
  
    %8:sgpr_32 = COPY $sgpr8
    %6:sgpr_64(p4) = COPY $sgpr4_sgpr5
    %3:vgpr_32(s32) = COPY $vgpr0
    %0:sreg_64 = COPY %6(p4)
    %11:sreg_32_xm0_xexec = S_LOAD_DWORD_IMM %6(p4), 60, 0 :: (dereferenceable invariant load (s32) from %ir..kernarg.offset7, addrspace 4)
    %12:sreg_32 = S_MOV_B32 2
    %13:vgpr_32 = V_LSHLREV_B32_e64 killed %12, %3(s32), implicit $exec
    %14:sreg_32 = S_MOV_B32 1020
    %15:vgpr_32 = V_AND_B32_e64 killed %13, killed %14, implicit $exec
    %16:sreg_32 = S_MOV_B32 10
    %17:vgpr_32 = COPY killed %16
    %1:vgpr_32 = V_LSHL_OR_B32_e64 %8, %17, killed %15, implicit $exec
    %18:sreg_64 = V_CMP_LT_I32_e64 %1, killed %11, implicit $exec
    %2:sreg_64 = SI_IF killed %18, %bb.2, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
    S_BRANCH %bb.1
  
  bb.1..critedge:
    successors: %bb.2(0x80000000)
  
    early-clobber %19:sgpr_128 = S_LOAD_DWORDX4_IMM_ec %0, 36, 0 :: (dereferenceable invariant load (s128) from %ir..kernarg.offset, align 4, addrspace 4)
    early-clobber %20:sreg_64_xexec = S_LOAD_DWORDX2_IMM_ec %0, 52, 0 :: (dereferenceable invariant load (s64) from %ir..kernarg.offset + 16, align 4, addrspace 4)
    %21:sreg_32 = COPY %19.sub3
    %22:sreg_32 = COPY %19.sub2
    %23:sreg_32 = COPY %19.sub1
    %24:sreg_32 = COPY %19.sub0
    %25:sreg_64 = REG_SEQUENCE killed %24, %subreg.sub0, killed %23, %subreg.sub1
    %26:sreg_64 = REG_SEQUENCE killed %22, %subreg.sub0, killed %21, %subreg.sub1
    %27:vgpr_32 = V_ASHRREV_I32_e64 31, %1, implicit $exec
    %28:vgpr_32 = COPY %27
    %29:vreg_64_align2 = REG_SEQUENCE %1, %subreg.sub0, killed %28, %subreg.sub1
    %30:sreg_32 = S_MOV_B32 2
    %31:vreg_64_align2 = V_LSHLREV_B64_e64 killed %30, killed %29, implicit $exec
    %32:vreg_64_align2 = V_LSHL_ADD_U64_e64 killed %25, 0, %31, implicit $exec
    %33:vreg_64_align2 = GLOBAL_LOAD_DWORDX2 killed %32, 0, 0, implicit $exec :: (load (s64) from %ir.20, align 16, addrspace 1)
    %34:vreg_64_align2 = V_LSHL_ADD_U64_e64 killed %26, 0, %31, implicit $exec
    %35:vreg_64_align2 = V_LSHL_ADD_U64_e64 killed %20, 0, %31, implicit $exec
    %36:vreg_64_align2 = GLOBAL_LOAD_DWORDX2 killed %34, 0, 0, implicit $exec :: (load (s64) from %ir.25, align 16, addrspace 1)
    %37:vreg_64_align2 = nofpexcept V_PK_ADD_F32 8, killed %33, 4, killed %36, 0, 0, 0, 0, 0, implicit $mode, implicit $exec
    %38:vgpr_32 = COPY %37.sub0
    GLOBAL_STORE_DWORD %35, killed %38, 0, 0, implicit $exec :: (store (s32) into %ir.26, addrspace 1)
    %39:vreg_64_align2 = V_PK_MOV_B32 12, %37, 8, %37, 0, 0, 0, 0, 0, implicit $exec
    GLOBAL_STORE_DWORDX2 %35, killed %39, 8, 0, implicit $exec :: (store (s64) into %ir.p_301, align 4, addrspace 1)
  
  bb.2..critedge2:
    SI_END_CF %2, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
    S_ENDPGM 0
...
